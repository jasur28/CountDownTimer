@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p><button @onclick="@(async ()=>{Timer();})">Start</button></p>
<p><button @onclick="@(()=>{is_stopwatchrunning=false;})">Pause</button></p>
<p><button @onclick="@(()=>{Timer();})">Resume</button></p>
<p><button @onclick="@(()=>{is_stopwatchrunning=false;stopwatchvalue=new TimeSpan();})">Stop</button></p>

<p>@TimeLeft</p>
<p>@displaytext</p>

@code{
    TimeSpan stopwatchvalue = new TimeSpan();
    bool is_stopwatchrunning = false;

    async Task StopWatch()
    { 
        is_stopwatchrunning=true;
        while(is_stopwatchrunning)
        {
            await Task.Delay(1000);
            if(is_stopwatchrunning)
            {
                stopwatchvalue = stopwatchvalue.Add(new TimeSpan(0, 0, 1));
                StateHasChanged();
            }
        }
    }

    TimeSpan TimeLeft = new TimeSpan(0, 0, 15);
    string displaytext = "";

    //protected override Task OnInitializedAsync()
    //{
    //    Timer();
    //    return base.OnInitializedAsync();
    //}

    async Task Timer()
    {
        while (TimeLeft > new TimeSpan())
        {
            await Task.Delay(1000);
            TimeLeft = TimeLeft.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
        }
        await AfterTime();
        StateHasChanged();
    }

    Task AfterTime()
    {
        displaytext = "time expired";
        return Task.CompletedTask;
    }
}







@*@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
*@